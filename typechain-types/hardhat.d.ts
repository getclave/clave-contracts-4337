/**
 * Copyright Clave - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */
/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import * as Contracts from ".";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";
import { ethers } from "ethers";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccount__factory>;
    getContractFactory(
      name: "IAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregator__factory>;
    getContractFactory(
      name: "IEntryPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEntryPoint__factory>;
    getContractFactory(
      name: "INonceManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INonceManager__factory>;
    getContractFactory(
      name: "IStakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeManager__factory>;
    getContractFactory(
      name: "TokenCallbackHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenCallbackHandler__factory>;
    getContractFactory(
      name: "IERC1271Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271Upgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "IERC777Recipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777Recipient__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccountFactory__factory>;
    getContractFactory(
      name: "Auth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Auth__factory>;
    getContractFactory(
      name: "EntrypointAuth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EntrypointAuth__factory>;
    getContractFactory(
      name: "ClaveImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaveImplementation__factory>;
    getContractFactory(
      name: "ClaveProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaveProxy__factory>;
    getContractFactory(
      name: "ClaveRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaveRegistry__factory>;
    getContractFactory(
      name: "P256Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.P256Verifier__factory>;
    getContractFactory(
      name: "ERC1271Handler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1271Handler__factory>;
    getContractFactory(
      name: "ValidationHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidationHandler__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "IClave",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClave__factory>;
    getContractFactory(
      name: "IClaveRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaveRegistry__factory>;
    getContractFactory(
      name: "IExecutionHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExecutionHook__factory>;
    getContractFactory(
      name: "IValidationHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IValidationHook__factory>;
    getContractFactory(
      name: "IInitable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInitable__factory>;
    getContractFactory(
      name: "IModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModule__factory>;
    getContractFactory(
      name: "IK1Validator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IK1Validator__factory>;
    getContractFactory(
      name: "IR1Validator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IR1Validator__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "HookManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HookManager__factory>;
    getContractFactory(
      name: "ModuleManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleManager__factory>;
    getContractFactory(
      name: "OwnerManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnerManager__factory>;
    getContractFactory(
      name: "UpgradeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeManager__factory>;
    getContractFactory(
      name: "ValidatorManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorManager__factory>;
    getContractFactory(
      name: "BaseRecovery",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseRecovery__factory>;
    getContractFactory(
      name: "CloudRecoveryModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CloudRecoveryModule__factory>;
    getContractFactory(
      name: "SocialRecoveryModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SocialRecoveryModule__factory>;
    getContractFactory(
      name: "EOAValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EOAValidator__factory>;
    getContractFactory(
      name: "TEEValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TEEValidator__factory>;

    getContractAt(
      name: "IAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccount>;
    getContractAt(
      name: "IAggregator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAggregator>;
    getContractAt(
      name: "IEntryPoint",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEntryPoint>;
    getContractAt(
      name: "INonceManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.INonceManager>;
    getContractAt(
      name: "IStakeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeManager>;
    getContractAt(
      name: "TokenCallbackHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenCallbackHandler>;
    getContractAt(
      name: "IERC1271Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271Upgradeable>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1271",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "IERC721Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "IERC777Recipient",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777Recipient>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AccountFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccountFactory>;
    getContractAt(
      name: "Auth",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Auth>;
    getContractAt(
      name: "EntrypointAuth",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EntrypointAuth>;
    getContractAt(
      name: "ClaveImplementation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaveImplementation>;
    getContractAt(
      name: "ClaveProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaveProxy>;
    getContractAt(
      name: "ClaveRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaveRegistry>;
    getContractAt(
      name: "P256Verifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.P256Verifier>;
    getContractAt(
      name: "ERC1271Handler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1271Handler>;
    getContractAt(
      name: "ValidationHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidationHandler>;
    getContractAt(
      name: "EIP712",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "IERC5267",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "Math",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "ShortStrings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "Strings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "IClave",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IClave>;
    getContractAt(
      name: "IClaveRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IClaveRegistry>;
    getContractAt(
      name: "IExecutionHook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExecutionHook>;
    getContractAt(
      name: "IValidationHook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IValidationHook>;
    getContractAt(
      name: "IInitable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IInitable>;
    getContractAt(
      name: "IModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IModule>;
    getContractAt(
      name: "IK1Validator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IK1Validator>;
    getContractAt(
      name: "IR1Validator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IR1Validator>;
    getContractAt(
      name: "Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "HookManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.HookManager>;
    getContractAt(
      name: "ModuleManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleManager>;
    getContractAt(
      name: "OwnerManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnerManager>;
    getContractAt(
      name: "UpgradeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeManager>;
    getContractAt(
      name: "ValidatorManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorManager>;
    getContractAt(
      name: "BaseRecovery",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseRecovery>;
    getContractAt(
      name: "CloudRecoveryModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CloudRecoveryModule>;
    getContractAt(
      name: "SocialRecoveryModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SocialRecoveryModule>;
    getContractAt(
      name: "EOAValidator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EOAValidator>;
    getContractAt(
      name: "TEEValidator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TEEValidator>;

    deployContract(
      name: "IAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccount>;
    deployContract(
      name: "IAggregator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAggregator>;
    deployContract(
      name: "IEntryPoint",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEntryPoint>;
    deployContract(
      name: "INonceManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INonceManager>;
    deployContract(
      name: "IStakeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakeManager>;
    deployContract(
      name: "TokenCallbackHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenCallbackHandler>;
    deployContract(
      name: "IERC1271Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271Upgradeable>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Receiver>;
    deployContract(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "IERC777Recipient",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC777Recipient>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "AccountFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccountFactory>;
    deployContract(
      name: "Auth",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Auth>;
    deployContract(
      name: "EntrypointAuth",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EntrypointAuth>;
    deployContract(
      name: "ClaveImplementation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClaveImplementation>;
    deployContract(
      name: "ClaveProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClaveProxy>;
    deployContract(
      name: "ClaveRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClaveRegistry>;
    deployContract(
      name: "P256Verifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.P256Verifier>;
    deployContract(
      name: "ERC1271Handler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1271Handler>;
    deployContract(
      name: "ValidationHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValidationHandler>;
    deployContract(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "Math",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "Strings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "IClave",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IClave>;
    deployContract(
      name: "IClaveRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IClaveRegistry>;
    deployContract(
      name: "IExecutionHook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExecutionHook>;
    deployContract(
      name: "IValidationHook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IValidationHook>;
    deployContract(
      name: "IInitable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInitable>;
    deployContract(
      name: "IModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IModule>;
    deployContract(
      name: "IK1Validator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IK1Validator>;
    deployContract(
      name: "IR1Validator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IR1Validator>;
    deployContract(
      name: "Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "HookManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HookManager>;
    deployContract(
      name: "ModuleManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ModuleManager>;
    deployContract(
      name: "OwnerManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnerManager>;
    deployContract(
      name: "UpgradeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeManager>;
    deployContract(
      name: "ValidatorManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValidatorManager>;
    deployContract(
      name: "BaseRecovery",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseRecovery>;
    deployContract(
      name: "CloudRecoveryModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CloudRecoveryModule>;
    deployContract(
      name: "SocialRecoveryModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SocialRecoveryModule>;
    deployContract(
      name: "EOAValidator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EOAValidator>;
    deployContract(
      name: "TEEValidator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TEEValidator>;

    deployContract(
      name: "IAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccount>;
    deployContract(
      name: "IAggregator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAggregator>;
    deployContract(
      name: "IEntryPoint",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEntryPoint>;
    deployContract(
      name: "INonceManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INonceManager>;
    deployContract(
      name: "IStakeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakeManager>;
    deployContract(
      name: "TokenCallbackHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenCallbackHandler>;
    deployContract(
      name: "IERC1271Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271Upgradeable>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1271",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "IERC1155Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Receiver>;
    deployContract(
      name: "IERC721Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "IERC777Recipient",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC777Recipient>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "AccountFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccountFactory>;
    deployContract(
      name: "Auth",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Auth>;
    deployContract(
      name: "EntrypointAuth",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EntrypointAuth>;
    deployContract(
      name: "ClaveImplementation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClaveImplementation>;
    deployContract(
      name: "ClaveProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClaveProxy>;
    deployContract(
      name: "ClaveRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClaveRegistry>;
    deployContract(
      name: "P256Verifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.P256Verifier>;
    deployContract(
      name: "ERC1271Handler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1271Handler>;
    deployContract(
      name: "ValidationHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValidationHandler>;
    deployContract(
      name: "EIP712",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "IERC5267",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "Math",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "ShortStrings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "Strings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "IClave",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IClave>;
    deployContract(
      name: "IClaveRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IClaveRegistry>;
    deployContract(
      name: "IExecutionHook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExecutionHook>;
    deployContract(
      name: "IValidationHook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IValidationHook>;
    deployContract(
      name: "IInitable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInitable>;
    deployContract(
      name: "IModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IModule>;
    deployContract(
      name: "IK1Validator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IK1Validator>;
    deployContract(
      name: "IR1Validator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IR1Validator>;
    deployContract(
      name: "Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "HookManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.HookManager>;
    deployContract(
      name: "ModuleManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ModuleManager>;
    deployContract(
      name: "OwnerManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnerManager>;
    deployContract(
      name: "UpgradeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeManager>;
    deployContract(
      name: "ValidatorManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValidatorManager>;
    deployContract(
      name: "BaseRecovery",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseRecovery>;
    deployContract(
      name: "CloudRecoveryModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CloudRecoveryModule>;
    deployContract(
      name: "SocialRecoveryModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SocialRecoveryModule>;
    deployContract(
      name: "EOAValidator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EOAValidator>;
    deployContract(
      name: "TEEValidator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TEEValidator>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
