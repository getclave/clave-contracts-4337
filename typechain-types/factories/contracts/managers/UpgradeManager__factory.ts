/**
 * Copyright Clave - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */
/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  UpgradeManager,
  UpgradeManagerInterface,
} from "../../../contracts/managers/UpgradeManager";
import { Contract, Interface, type ContractRunner } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "NOT_FROM_SELF",
    type: "error",
  },
  {
    inputs: [],
    name: "SAME_IMPLEMENTATION",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldImplementation",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "entrypoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class UpgradeManager__factory {
  static readonly abi = _abi;
  static createInterface(): UpgradeManagerInterface {
    return new Interface(_abi) as UpgradeManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): UpgradeManager {
    return new Contract(address, _abi, runner) as unknown as UpgradeManager;
  }
}
