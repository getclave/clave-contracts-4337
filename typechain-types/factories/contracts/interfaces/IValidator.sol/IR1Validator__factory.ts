/**
 * Copyright Clave - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */
/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  IR1Validator,
  IR1ValidatorInterface,
} from "../../../../contracts/interfaces/IValidator.sol/IR1Validator";
import { Contract, Interface, type ContractRunner } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "signedHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "bytes32[2]",
        name: "pubKey",
        type: "bytes32[2]",
      },
    ],
    name: "validateSignature",
    outputs: [
      {
        internalType: "bool",
        name: "valid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IR1Validator__factory {
  static readonly abi = _abi;
  static createInterface(): IR1ValidatorInterface {
    return new Interface(_abi) as IR1ValidatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IR1Validator {
    return new Contract(address, _abi, runner) as unknown as IR1Validator;
  }
}
