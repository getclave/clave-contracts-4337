/**
 * Copyright Clave - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */
/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  IClaveRegistry,
  IClaveRegistryInterface,
} from "../../../contracts/interfaces/IClaveRegistry";
import { Contract, Interface, type ContractRunner } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isClave",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IClaveRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): IClaveRegistryInterface {
    return new Interface(_abi) as IClaveRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IClaveRegistry {
    return new Contract(address, _abi, runner) as unknown as IClaveRegistry;
  }
}
