/**
 * Copyright Clave - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */
/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export type UserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  callGasLimit: bigint,
  verificationGasLimit: bigint,
  preVerificationGas: bigint,
  maxFeePerGas: bigint,
  maxPriorityFeePerGas: bigint,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  callGasLimit: bigint;
  verificationGasLimit: bigint;
  preVerificationGas: bigint;
  maxFeePerGas: bigint;
  maxPriorityFeePerGas: bigint;
  paymasterAndData: string;
  signature: string;
};

export declare namespace ERC1271Handler {
  export type ClaveMessageStruct = { signedHash: BytesLike };

  export type ClaveMessageStructOutput = [signedHash: string] & {
    signedHash: string;
  };
}

export interface ClaveImplementationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addDeposit"
      | "addHook"
      | "addModule"
      | "claveMessageTypeHash"
      | "eip712Domain"
      | "entrypoint"
      | "execute"
      | "executeBatch"
      | "executeFromModule"
      | "getDeposit"
      | "getEip712Hash"
      | "getHookData"
      | "getNonce"
      | "implementation"
      | "initialize"
      | "isHook"
      | "isModule"
      | "isValidSignature"
      | "k1AddOwner"
      | "k1AddValidator"
      | "k1IsOwner"
      | "k1IsValidator"
      | "k1ListOwners"
      | "k1ListValidators"
      | "k1RemoveOwner"
      | "k1RemoveValidator"
      | "listHooks"
      | "listModules"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "r1AddOwner"
      | "r1AddValidator"
      | "r1IsOwner"
      | "r1IsValidator"
      | "r1ListOwners"
      | "r1ListValidators"
      | "r1RemoveOwner"
      | "r1RemoveValidator"
      | "removeHook"
      | "removeModule"
      | "resetOwners"
      | "setHookData"
      | "supportsInterface"
      | "tokensReceived"
      | "upgradeTo"
      | "validateUserOp"
      | "withdrawDepositTo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddHook"
      | "AddModule"
      | "EIP712DomainChanged"
      | "Initialized"
      | "K1AddOwner"
      | "K1AddValidator"
      | "K1RemoveOwner"
      | "K1RemoveValidator"
      | "R1AddOwner"
      | "R1AddValidator"
      | "R1RemoveOwner"
      | "R1RemoveValidator"
      | "RemoveHook"
      | "RemoveModule"
      | "ResetOwners"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addHook",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addModule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claveMessageTypeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "entrypoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [AddressLike[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeFromModule",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEip712Hash",
    values: [ERC1271Handler.ClaveMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getHookData",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike, AddressLike, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "isHook", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "isModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "k1AddOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "k1AddValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "k1IsOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "k1IsValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "k1ListOwners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "k1ListValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "k1RemoveOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "k1RemoveValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "listHooks", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "listModules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "r1AddOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "r1AddValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "r1IsOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "r1IsValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "r1ListOwners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "r1ListValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "r1RemoveOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "r1RemoveValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeHook",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resetOwners",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setHookData",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [UserOperationStruct, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDepositTo",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addHook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addModule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claveMessageTypeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entrypoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeFromModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEip712Hash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHookData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isHook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isModule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "k1AddOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "k1AddValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "k1IsOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "k1IsValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "k1ListOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "k1ListValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "k1RemoveOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "k1RemoveValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listHooks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "r1AddOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "r1AddValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "r1IsOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "r1IsValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "r1ListOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "r1ListValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "r1RemoveOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "r1RemoveValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeHook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHookData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDepositTo",
    data: BytesLike
  ): Result;
}

export namespace AddHookEvent {
  export type InputTuple = [hook: AddressLike];
  export type OutputTuple = [hook: string];
  export interface OutputObject {
    hook: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddModuleEvent {
  export type InputTuple = [module: AddressLike];
  export type OutputTuple = [module: string];
  export interface OutputObject {
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace K1AddOwnerEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace K1AddValidatorEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace K1RemoveOwnerEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace K1RemoveValidatorEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace R1AddOwnerEvent {
  export type InputTuple = [pubKey: BytesLike];
  export type OutputTuple = [pubKey: string];
  export interface OutputObject {
    pubKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace R1AddValidatorEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace R1RemoveOwnerEvent {
  export type InputTuple = [pubKey: BytesLike];
  export type OutputTuple = [pubKey: string];
  export interface OutputObject {
    pubKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace R1RemoveValidatorEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveHookEvent {
  export type InputTuple = [hook: AddressLike];
  export type OutputTuple = [hook: string];
  export interface OutputObject {
    hook: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveModuleEvent {
  export type InputTuple = [module: AddressLike];
  export type OutputTuple = [module: string];
  export interface OutputObject {
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResetOwnersEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [
    oldImplementation: AddressLike,
    newImplementation: AddressLike
  ];
  export type OutputTuple = [
    oldImplementation: string,
    newImplementation: string
  ];
  export interface OutputObject {
    oldImplementation: string;
    newImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ClaveImplementation extends BaseContract {
  connect(runner?: ContractRunner | null): ClaveImplementation;
  waitForDeployment(): Promise<this>;

  interface: ClaveImplementationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addDeposit: TypedContractMethod<[], [void], "payable">;

  addHook: TypedContractMethod<
    [hookAndData: BytesLike, isValidation: boolean],
    [void],
    "nonpayable"
  >;

  addModule: TypedContractMethod<
    [moduleAndData: BytesLike],
    [void],
    "nonpayable"
  >;

  claveMessageTypeHash: TypedContractMethod<[], [string], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  entrypoint: TypedContractMethod<[], [string], "view">;

  execute: TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  executeBatch: TypedContractMethod<
    [to: AddressLike[], value: BigNumberish[], data: BytesLike[]],
    [void],
    "nonpayable"
  >;

  executeFromModule: TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getDeposit: TypedContractMethod<[], [bigint], "view">;

  getEip712Hash: TypedContractMethod<
    [claveMessage: ERC1271Handler.ClaveMessageStruct],
    [string],
    "view"
  >;

  getHookData: TypedContractMethod<
    [hook: AddressLike, key: BytesLike],
    [string],
    "view"
  >;

  getNonce: TypedContractMethod<[], [bigint], "view">;

  implementation: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      initialR1Owner: BytesLike,
      initialR1Validator: AddressLike,
      modules: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  isHook: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  isModule: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  isValidSignature: TypedContractMethod<
    [signedHash: BytesLike, signatureAndValidator: BytesLike],
    [string],
    "view"
  >;

  k1AddOwner: TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;

  k1AddValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  k1IsOwner: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  k1IsValidator: TypedContractMethod<
    [validator: AddressLike],
    [boolean],
    "view"
  >;

  k1ListOwners: TypedContractMethod<[], [string[]], "view">;

  k1ListValidators: TypedContractMethod<[], [string[]], "view">;

  k1RemoveOwner: TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;

  k1RemoveValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  listHooks: TypedContractMethod<[isValidation: boolean], [string[]], "view">;

  listModules: TypedContractMethod<[], [string[]], "view">;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  r1AddOwner: TypedContractMethod<[pubKey: BytesLike], [void], "nonpayable">;

  r1AddValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  r1IsOwner: TypedContractMethod<[pubKey: BytesLike], [boolean], "view">;

  r1IsValidator: TypedContractMethod<
    [validator: AddressLike],
    [boolean],
    "view"
  >;

  r1ListOwners: TypedContractMethod<[], [string[]], "view">;

  r1ListValidators: TypedContractMethod<[], [string[]], "view">;

  r1RemoveOwner: TypedContractMethod<[pubKey: BytesLike], [void], "nonpayable">;

  r1RemoveValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  removeHook: TypedContractMethod<
    [hook: AddressLike, isValidation: boolean],
    [void],
    "nonpayable"
  >;

  removeModule: TypedContractMethod<
    [module: AddressLike],
    [void],
    "nonpayable"
  >;

  resetOwners: TypedContractMethod<[pubKey: BytesLike], [void], "nonpayable">;

  setHookData: TypedContractMethod<
    [key: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokensReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: AddressLike,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike
    ],
    [void],
    "view"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  validateUserOp: TypedContractMethod<
    [
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  withdrawDepositTo: TypedContractMethod<
    [withdrawAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addDeposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "addHook"
  ): TypedContractMethod<
    [hookAndData: BytesLike, isValidation: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addModule"
  ): TypedContractMethod<[moduleAndData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claveMessageTypeHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "entrypoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeBatch"
  ): TypedContractMethod<
    [to: AddressLike[], value: BigNumberish[], data: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeFromModule"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEip712Hash"
  ): TypedContractMethod<
    [claveMessage: ERC1271Handler.ClaveMessageStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHookData"
  ): TypedContractMethod<[hook: AddressLike, key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      initialR1Owner: BytesLike,
      initialR1Validator: AddressLike,
      modules: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isHook"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isModule"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [signedHash: BytesLike, signatureAndValidator: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "k1AddOwner"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "k1AddValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "k1IsOwner"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "k1IsValidator"
  ): TypedContractMethod<[validator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "k1ListOwners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "k1ListValidators"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "k1RemoveOwner"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "k1RemoveValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "listHooks"
  ): TypedContractMethod<[isValidation: boolean], [string[]], "view">;
  getFunction(
    nameOrSignature: "listModules"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "r1AddOwner"
  ): TypedContractMethod<[pubKey: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "r1AddValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "r1IsOwner"
  ): TypedContractMethod<[pubKey: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "r1IsValidator"
  ): TypedContractMethod<[validator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "r1ListOwners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "r1ListValidators"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "r1RemoveOwner"
  ): TypedContractMethod<[pubKey: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "r1RemoveValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeHook"
  ): TypedContractMethod<
    [hook: AddressLike, isValidation: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeModule"
  ): TypedContractMethod<[module: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetOwners"
  ): TypedContractMethod<[pubKey: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHookData"
  ): TypedContractMethod<
    [key: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokensReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: AddressLike,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateUserOp"
  ): TypedContractMethod<
    [
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawDepositTo"
  ): TypedContractMethod<
    [withdrawAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddHook"
  ): TypedContractEvent<
    AddHookEvent.InputTuple,
    AddHookEvent.OutputTuple,
    AddHookEvent.OutputObject
  >;
  getEvent(
    key: "AddModule"
  ): TypedContractEvent<
    AddModuleEvent.InputTuple,
    AddModuleEvent.OutputTuple,
    AddModuleEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "K1AddOwner"
  ): TypedContractEvent<
    K1AddOwnerEvent.InputTuple,
    K1AddOwnerEvent.OutputTuple,
    K1AddOwnerEvent.OutputObject
  >;
  getEvent(
    key: "K1AddValidator"
  ): TypedContractEvent<
    K1AddValidatorEvent.InputTuple,
    K1AddValidatorEvent.OutputTuple,
    K1AddValidatorEvent.OutputObject
  >;
  getEvent(
    key: "K1RemoveOwner"
  ): TypedContractEvent<
    K1RemoveOwnerEvent.InputTuple,
    K1RemoveOwnerEvent.OutputTuple,
    K1RemoveOwnerEvent.OutputObject
  >;
  getEvent(
    key: "K1RemoveValidator"
  ): TypedContractEvent<
    K1RemoveValidatorEvent.InputTuple,
    K1RemoveValidatorEvent.OutputTuple,
    K1RemoveValidatorEvent.OutputObject
  >;
  getEvent(
    key: "R1AddOwner"
  ): TypedContractEvent<
    R1AddOwnerEvent.InputTuple,
    R1AddOwnerEvent.OutputTuple,
    R1AddOwnerEvent.OutputObject
  >;
  getEvent(
    key: "R1AddValidator"
  ): TypedContractEvent<
    R1AddValidatorEvent.InputTuple,
    R1AddValidatorEvent.OutputTuple,
    R1AddValidatorEvent.OutputObject
  >;
  getEvent(
    key: "R1RemoveOwner"
  ): TypedContractEvent<
    R1RemoveOwnerEvent.InputTuple,
    R1RemoveOwnerEvent.OutputTuple,
    R1RemoveOwnerEvent.OutputObject
  >;
  getEvent(
    key: "R1RemoveValidator"
  ): TypedContractEvent<
    R1RemoveValidatorEvent.InputTuple,
    R1RemoveValidatorEvent.OutputTuple,
    R1RemoveValidatorEvent.OutputObject
  >;
  getEvent(
    key: "RemoveHook"
  ): TypedContractEvent<
    RemoveHookEvent.InputTuple,
    RemoveHookEvent.OutputTuple,
    RemoveHookEvent.OutputObject
  >;
  getEvent(
    key: "RemoveModule"
  ): TypedContractEvent<
    RemoveModuleEvent.InputTuple,
    RemoveModuleEvent.OutputTuple,
    RemoveModuleEvent.OutputObject
  >;
  getEvent(
    key: "ResetOwners"
  ): TypedContractEvent<
    ResetOwnersEvent.InputTuple,
    ResetOwnersEvent.OutputTuple,
    ResetOwnersEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AddHook(address)": TypedContractEvent<
      AddHookEvent.InputTuple,
      AddHookEvent.OutputTuple,
      AddHookEvent.OutputObject
    >;
    AddHook: TypedContractEvent<
      AddHookEvent.InputTuple,
      AddHookEvent.OutputTuple,
      AddHookEvent.OutputObject
    >;

    "AddModule(address)": TypedContractEvent<
      AddModuleEvent.InputTuple,
      AddModuleEvent.OutputTuple,
      AddModuleEvent.OutputObject
    >;
    AddModule: TypedContractEvent<
      AddModuleEvent.InputTuple,
      AddModuleEvent.OutputTuple,
      AddModuleEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "K1AddOwner(address)": TypedContractEvent<
      K1AddOwnerEvent.InputTuple,
      K1AddOwnerEvent.OutputTuple,
      K1AddOwnerEvent.OutputObject
    >;
    K1AddOwner: TypedContractEvent<
      K1AddOwnerEvent.InputTuple,
      K1AddOwnerEvent.OutputTuple,
      K1AddOwnerEvent.OutputObject
    >;

    "K1AddValidator(address)": TypedContractEvent<
      K1AddValidatorEvent.InputTuple,
      K1AddValidatorEvent.OutputTuple,
      K1AddValidatorEvent.OutputObject
    >;
    K1AddValidator: TypedContractEvent<
      K1AddValidatorEvent.InputTuple,
      K1AddValidatorEvent.OutputTuple,
      K1AddValidatorEvent.OutputObject
    >;

    "K1RemoveOwner(address)": TypedContractEvent<
      K1RemoveOwnerEvent.InputTuple,
      K1RemoveOwnerEvent.OutputTuple,
      K1RemoveOwnerEvent.OutputObject
    >;
    K1RemoveOwner: TypedContractEvent<
      K1RemoveOwnerEvent.InputTuple,
      K1RemoveOwnerEvent.OutputTuple,
      K1RemoveOwnerEvent.OutputObject
    >;

    "K1RemoveValidator(address)": TypedContractEvent<
      K1RemoveValidatorEvent.InputTuple,
      K1RemoveValidatorEvent.OutputTuple,
      K1RemoveValidatorEvent.OutputObject
    >;
    K1RemoveValidator: TypedContractEvent<
      K1RemoveValidatorEvent.InputTuple,
      K1RemoveValidatorEvent.OutputTuple,
      K1RemoveValidatorEvent.OutputObject
    >;

    "R1AddOwner(bytes)": TypedContractEvent<
      R1AddOwnerEvent.InputTuple,
      R1AddOwnerEvent.OutputTuple,
      R1AddOwnerEvent.OutputObject
    >;
    R1AddOwner: TypedContractEvent<
      R1AddOwnerEvent.InputTuple,
      R1AddOwnerEvent.OutputTuple,
      R1AddOwnerEvent.OutputObject
    >;

    "R1AddValidator(address)": TypedContractEvent<
      R1AddValidatorEvent.InputTuple,
      R1AddValidatorEvent.OutputTuple,
      R1AddValidatorEvent.OutputObject
    >;
    R1AddValidator: TypedContractEvent<
      R1AddValidatorEvent.InputTuple,
      R1AddValidatorEvent.OutputTuple,
      R1AddValidatorEvent.OutputObject
    >;

    "R1RemoveOwner(bytes)": TypedContractEvent<
      R1RemoveOwnerEvent.InputTuple,
      R1RemoveOwnerEvent.OutputTuple,
      R1RemoveOwnerEvent.OutputObject
    >;
    R1RemoveOwner: TypedContractEvent<
      R1RemoveOwnerEvent.InputTuple,
      R1RemoveOwnerEvent.OutputTuple,
      R1RemoveOwnerEvent.OutputObject
    >;

    "R1RemoveValidator(address)": TypedContractEvent<
      R1RemoveValidatorEvent.InputTuple,
      R1RemoveValidatorEvent.OutputTuple,
      R1RemoveValidatorEvent.OutputObject
    >;
    R1RemoveValidator: TypedContractEvent<
      R1RemoveValidatorEvent.InputTuple,
      R1RemoveValidatorEvent.OutputTuple,
      R1RemoveValidatorEvent.OutputObject
    >;

    "RemoveHook(address)": TypedContractEvent<
      RemoveHookEvent.InputTuple,
      RemoveHookEvent.OutputTuple,
      RemoveHookEvent.OutputObject
    >;
    RemoveHook: TypedContractEvent<
      RemoveHookEvent.InputTuple,
      RemoveHookEvent.OutputTuple,
      RemoveHookEvent.OutputObject
    >;

    "RemoveModule(address)": TypedContractEvent<
      RemoveModuleEvent.InputTuple,
      RemoveModuleEvent.OutputTuple,
      RemoveModuleEvent.OutputObject
    >;
    RemoveModule: TypedContractEvent<
      RemoveModuleEvent.InputTuple,
      RemoveModuleEvent.OutputTuple,
      RemoveModuleEvent.OutputObject
    >;

    "ResetOwners()": TypedContractEvent<
      ResetOwnersEvent.InputTuple,
      ResetOwnersEvent.OutputTuple,
      ResetOwnersEvent.OutputObject
    >;
    ResetOwners: TypedContractEvent<
      ResetOwnersEvent.InputTuple,
      ResetOwnersEvent.OutputTuple,
      ResetOwnersEvent.OutputObject
    >;

    "Upgraded(address,address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
