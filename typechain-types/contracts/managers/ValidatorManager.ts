/**
 * Copyright Clave - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */
/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface ValidatorManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "entrypoint"
      | "k1AddValidator"
      | "k1IsValidator"
      | "k1ListValidators"
      | "k1RemoveValidator"
      | "r1AddValidator"
      | "r1IsValidator"
      | "r1ListValidators"
      | "r1RemoveValidator"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "K1AddValidator"
      | "K1RemoveValidator"
      | "R1AddValidator"
      | "R1RemoveValidator"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "entrypoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "k1AddValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "k1IsValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "k1ListValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "k1RemoveValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "r1AddValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "r1IsValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "r1ListValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "r1RemoveValidator",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "entrypoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "k1AddValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "k1IsValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "k1ListValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "k1RemoveValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "r1AddValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "r1IsValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "r1ListValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "r1RemoveValidator",
    data: BytesLike
  ): Result;
}

export namespace K1AddValidatorEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace K1RemoveValidatorEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace R1AddValidatorEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace R1RemoveValidatorEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ValidatorManager extends BaseContract {
  connect(runner?: ContractRunner | null): ValidatorManager;
  waitForDeployment(): Promise<this>;

  interface: ValidatorManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  entrypoint: TypedContractMethod<[], [string], "view">;

  k1AddValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  k1IsValidator: TypedContractMethod<
    [validator: AddressLike],
    [boolean],
    "view"
  >;

  k1ListValidators: TypedContractMethod<[], [string[]], "view">;

  k1RemoveValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  r1AddValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  r1IsValidator: TypedContractMethod<
    [validator: AddressLike],
    [boolean],
    "view"
  >;

  r1ListValidators: TypedContractMethod<[], [string[]], "view">;

  r1RemoveValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "entrypoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "k1AddValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "k1IsValidator"
  ): TypedContractMethod<[validator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "k1ListValidators"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "k1RemoveValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "r1AddValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "r1IsValidator"
  ): TypedContractMethod<[validator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "r1ListValidators"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "r1RemoveValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "K1AddValidator"
  ): TypedContractEvent<
    K1AddValidatorEvent.InputTuple,
    K1AddValidatorEvent.OutputTuple,
    K1AddValidatorEvent.OutputObject
  >;
  getEvent(
    key: "K1RemoveValidator"
  ): TypedContractEvent<
    K1RemoveValidatorEvent.InputTuple,
    K1RemoveValidatorEvent.OutputTuple,
    K1RemoveValidatorEvent.OutputObject
  >;
  getEvent(
    key: "R1AddValidator"
  ): TypedContractEvent<
    R1AddValidatorEvent.InputTuple,
    R1AddValidatorEvent.OutputTuple,
    R1AddValidatorEvent.OutputObject
  >;
  getEvent(
    key: "R1RemoveValidator"
  ): TypedContractEvent<
    R1RemoveValidatorEvent.InputTuple,
    R1RemoveValidatorEvent.OutputTuple,
    R1RemoveValidatorEvent.OutputObject
  >;

  filters: {
    "K1AddValidator(address)": TypedContractEvent<
      K1AddValidatorEvent.InputTuple,
      K1AddValidatorEvent.OutputTuple,
      K1AddValidatorEvent.OutputObject
    >;
    K1AddValidator: TypedContractEvent<
      K1AddValidatorEvent.InputTuple,
      K1AddValidatorEvent.OutputTuple,
      K1AddValidatorEvent.OutputObject
    >;

    "K1RemoveValidator(address)": TypedContractEvent<
      K1RemoveValidatorEvent.InputTuple,
      K1RemoveValidatorEvent.OutputTuple,
      K1RemoveValidatorEvent.OutputObject
    >;
    K1RemoveValidator: TypedContractEvent<
      K1RemoveValidatorEvent.InputTuple,
      K1RemoveValidatorEvent.OutputTuple,
      K1RemoveValidatorEvent.OutputObject
    >;

    "R1AddValidator(address)": TypedContractEvent<
      R1AddValidatorEvent.InputTuple,
      R1AddValidatorEvent.OutputTuple,
      R1AddValidatorEvent.OutputObject
    >;
    R1AddValidator: TypedContractEvent<
      R1AddValidatorEvent.InputTuple,
      R1AddValidatorEvent.OutputTuple,
      R1AddValidatorEvent.OutputObject
    >;

    "R1RemoveValidator(address)": TypedContractEvent<
      R1RemoveValidatorEvent.InputTuple,
      R1RemoveValidatorEvent.OutputTuple,
      R1RemoveValidatorEvent.OutputObject
    >;
    R1RemoveValidator: TypedContractEvent<
      R1RemoveValidatorEvent.InputTuple,
      R1RemoveValidatorEvent.OutputTuple,
      R1RemoveValidatorEvent.OutputObject
    >;
  };
}
