/**
 * Copyright Clave - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */
/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface OwnerManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "entrypoint"
      | "isHook"
      | "isModule"
      | "k1AddOwner"
      | "k1IsOwner"
      | "k1ListOwners"
      | "k1RemoveOwner"
      | "r1AddOwner"
      | "r1IsOwner"
      | "r1ListOwners"
      | "r1RemoveOwner"
      | "resetOwners"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "K1AddOwner"
      | "K1RemoveOwner"
      | "R1AddOwner"
      | "R1RemoveOwner"
      | "ResetOwners"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "entrypoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isHook", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "isModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "k1AddOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "k1IsOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "k1ListOwners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "k1RemoveOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "r1AddOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "r1IsOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "r1ListOwners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "r1RemoveOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resetOwners",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "entrypoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isHook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isModule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "k1AddOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "k1IsOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "k1ListOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "k1RemoveOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "r1AddOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "r1IsOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "r1ListOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "r1RemoveOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetOwners",
    data: BytesLike
  ): Result;
}

export namespace K1AddOwnerEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace K1RemoveOwnerEvent {
  export type InputTuple = [addr: AddressLike];
  export type OutputTuple = [addr: string];
  export interface OutputObject {
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace R1AddOwnerEvent {
  export type InputTuple = [pubKey: BytesLike];
  export type OutputTuple = [pubKey: string];
  export interface OutputObject {
    pubKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace R1RemoveOwnerEvent {
  export type InputTuple = [pubKey: BytesLike];
  export type OutputTuple = [pubKey: string];
  export interface OutputObject {
    pubKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResetOwnersEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OwnerManager extends BaseContract {
  connect(runner?: ContractRunner | null): OwnerManager;
  waitForDeployment(): Promise<this>;

  interface: OwnerManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  entrypoint: TypedContractMethod<[], [string], "view">;

  isHook: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  isModule: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  k1AddOwner: TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;

  k1IsOwner: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  k1ListOwners: TypedContractMethod<[], [string[]], "view">;

  k1RemoveOwner: TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;

  r1AddOwner: TypedContractMethod<[pubKey: BytesLike], [void], "nonpayable">;

  r1IsOwner: TypedContractMethod<[pubKey: BytesLike], [boolean], "view">;

  r1ListOwners: TypedContractMethod<[], [string[]], "view">;

  r1RemoveOwner: TypedContractMethod<[pubKey: BytesLike], [void], "nonpayable">;

  resetOwners: TypedContractMethod<[pubKey: BytesLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "entrypoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isHook"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isModule"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "k1AddOwner"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "k1IsOwner"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "k1ListOwners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "k1RemoveOwner"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "r1AddOwner"
  ): TypedContractMethod<[pubKey: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "r1IsOwner"
  ): TypedContractMethod<[pubKey: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "r1ListOwners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "r1RemoveOwner"
  ): TypedContractMethod<[pubKey: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetOwners"
  ): TypedContractMethod<[pubKey: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "K1AddOwner"
  ): TypedContractEvent<
    K1AddOwnerEvent.InputTuple,
    K1AddOwnerEvent.OutputTuple,
    K1AddOwnerEvent.OutputObject
  >;
  getEvent(
    key: "K1RemoveOwner"
  ): TypedContractEvent<
    K1RemoveOwnerEvent.InputTuple,
    K1RemoveOwnerEvent.OutputTuple,
    K1RemoveOwnerEvent.OutputObject
  >;
  getEvent(
    key: "R1AddOwner"
  ): TypedContractEvent<
    R1AddOwnerEvent.InputTuple,
    R1AddOwnerEvent.OutputTuple,
    R1AddOwnerEvent.OutputObject
  >;
  getEvent(
    key: "R1RemoveOwner"
  ): TypedContractEvent<
    R1RemoveOwnerEvent.InputTuple,
    R1RemoveOwnerEvent.OutputTuple,
    R1RemoveOwnerEvent.OutputObject
  >;
  getEvent(
    key: "ResetOwners"
  ): TypedContractEvent<
    ResetOwnersEvent.InputTuple,
    ResetOwnersEvent.OutputTuple,
    ResetOwnersEvent.OutputObject
  >;

  filters: {
    "K1AddOwner(address)": TypedContractEvent<
      K1AddOwnerEvent.InputTuple,
      K1AddOwnerEvent.OutputTuple,
      K1AddOwnerEvent.OutputObject
    >;
    K1AddOwner: TypedContractEvent<
      K1AddOwnerEvent.InputTuple,
      K1AddOwnerEvent.OutputTuple,
      K1AddOwnerEvent.OutputObject
    >;

    "K1RemoveOwner(address)": TypedContractEvent<
      K1RemoveOwnerEvent.InputTuple,
      K1RemoveOwnerEvent.OutputTuple,
      K1RemoveOwnerEvent.OutputObject
    >;
    K1RemoveOwner: TypedContractEvent<
      K1RemoveOwnerEvent.InputTuple,
      K1RemoveOwnerEvent.OutputTuple,
      K1RemoveOwnerEvent.OutputObject
    >;

    "R1AddOwner(bytes)": TypedContractEvent<
      R1AddOwnerEvent.InputTuple,
      R1AddOwnerEvent.OutputTuple,
      R1AddOwnerEvent.OutputObject
    >;
    R1AddOwner: TypedContractEvent<
      R1AddOwnerEvent.InputTuple,
      R1AddOwnerEvent.OutputTuple,
      R1AddOwnerEvent.OutputObject
    >;

    "R1RemoveOwner(bytes)": TypedContractEvent<
      R1RemoveOwnerEvent.InputTuple,
      R1RemoveOwnerEvent.OutputTuple,
      R1RemoveOwnerEvent.OutputObject
    >;
    R1RemoveOwner: TypedContractEvent<
      R1RemoveOwnerEvent.InputTuple,
      R1RemoveOwnerEvent.OutputTuple,
      R1RemoveOwnerEvent.OutputObject
    >;

    "ResetOwners()": TypedContractEvent<
      ResetOwnersEvent.InputTuple,
      ResetOwnersEvent.OutputTuple,
      ResetOwnersEvent.OutputObject
    >;
    ResetOwners: TypedContractEvent<
      ResetOwnersEvent.InputTuple,
      ResetOwnersEvent.OutputTuple,
      ResetOwnersEvent.OutputObject
    >;
  };
}
