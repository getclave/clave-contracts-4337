/**
 * Copyright Clave - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */
/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface HookManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addHook"
      | "entrypoint"
      | "getHookData"
      | "isHook"
      | "isModule"
      | "listHooks"
      | "removeHook"
      | "resetOwners"
      | "setHookData"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AddHook" | "RemoveHook"): EventFragment;

  encodeFunctionData(
    functionFragment: "addHook",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "entrypoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHookData",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isHook", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "isModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "listHooks", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "removeHook",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "resetOwners",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setHookData",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addHook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "entrypoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHookData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isModule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listHooks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeHook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resetOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHookData",
    data: BytesLike
  ): Result;
}

export namespace AddHookEvent {
  export type InputTuple = [hook: AddressLike];
  export type OutputTuple = [hook: string];
  export interface OutputObject {
    hook: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveHookEvent {
  export type InputTuple = [hook: AddressLike];
  export type OutputTuple = [hook: string];
  export interface OutputObject {
    hook: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HookManager extends BaseContract {
  connect(runner?: ContractRunner | null): HookManager;
  waitForDeployment(): Promise<this>;

  interface: HookManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addHook: TypedContractMethod<
    [hookAndData: BytesLike, isValidation: boolean],
    [void],
    "nonpayable"
  >;

  entrypoint: TypedContractMethod<[], [string], "view">;

  getHookData: TypedContractMethod<
    [hook: AddressLike, key: BytesLike],
    [string],
    "view"
  >;

  isHook: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  isModule: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  listHooks: TypedContractMethod<[isValidation: boolean], [string[]], "view">;

  removeHook: TypedContractMethod<
    [hook: AddressLike, isValidation: boolean],
    [void],
    "nonpayable"
  >;

  resetOwners: TypedContractMethod<[pubKey: BytesLike], [void], "nonpayable">;

  setHookData: TypedContractMethod<
    [key: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addHook"
  ): TypedContractMethod<
    [hookAndData: BytesLike, isValidation: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "entrypoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getHookData"
  ): TypedContractMethod<[hook: AddressLike, key: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "isHook"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isModule"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "listHooks"
  ): TypedContractMethod<[isValidation: boolean], [string[]], "view">;
  getFunction(
    nameOrSignature: "removeHook"
  ): TypedContractMethod<
    [hook: AddressLike, isValidation: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resetOwners"
  ): TypedContractMethod<[pubKey: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHookData"
  ): TypedContractMethod<
    [key: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddHook"
  ): TypedContractEvent<
    AddHookEvent.InputTuple,
    AddHookEvent.OutputTuple,
    AddHookEvent.OutputObject
  >;
  getEvent(
    key: "RemoveHook"
  ): TypedContractEvent<
    RemoveHookEvent.InputTuple,
    RemoveHookEvent.OutputTuple,
    RemoveHookEvent.OutputObject
  >;

  filters: {
    "AddHook(address)": TypedContractEvent<
      AddHookEvent.InputTuple,
      AddHookEvent.OutputTuple,
      AddHookEvent.OutputObject
    >;
    AddHook: TypedContractEvent<
      AddHookEvent.InputTuple,
      AddHookEvent.OutputTuple,
      AddHookEvent.OutputObject
    >;

    "RemoveHook(address)": TypedContractEvent<
      RemoveHookEvent.InputTuple,
      RemoveHookEvent.OutputTuple,
      RemoveHookEvent.OutputObject
    >;
    RemoveHook: TypedContractEvent<
      RemoveHookEvent.InputTuple,
      RemoveHookEvent.OutputTuple,
      RemoveHookEvent.OutputObject
    >;
  };
}
