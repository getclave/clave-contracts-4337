/**
 * Copyright Clave - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */
/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export declare namespace BaseRecovery {
  export type RecoveryDataStruct = {
    recoveringAddress: AddressLike;
    newOwner: BytesLike;
    nonce: BigNumberish;
  };

  export type RecoveryDataStructOutput = [
    recoveringAddress: string,
    newOwner: string,
    nonce: bigint
  ] & { recoveringAddress: string; newOwner: string; nonce: bigint };
}

export interface BaseRecoveryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "disable"
      | "eip712Domain"
      | "executeRecovery"
      | "getEip712Hash"
      | "init"
      | "isInited"
      | "isRecovering"
      | "recoveryDataTypeHash"
      | "recoveryNonces"
      | "recoveryStates"
      | "stopRecovery"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Disabled"
      | "EIP712DomainChanged"
      | "Inited"
      | "RecoveryExecuted"
      | "RecoveryStarted"
      | "RecoveryStopped"
  ): EventFragment;

  encodeFunctionData(functionFragment: "disable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeRecovery",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEip712Hash",
    values: [BaseRecovery.RecoveryDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isInited",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRecovering",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryDataTypeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryNonces",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryStates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stopRecovery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "disable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEip712Hash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInited", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRecovering",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryDataTypeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace DisabledEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveryExecutedEvent {
  export type InputTuple = [account: AddressLike, newOwner: BytesLike];
  export type OutputTuple = [account: string, newOwner: string];
  export interface OutputObject {
    account: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveryStartedEvent {
  export type InputTuple = [
    account: AddressLike,
    newOwner: BytesLike,
    timelockExpiry: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    newOwner: string,
    timelockExpiry: bigint
  ];
  export interface OutputObject {
    account: string;
    newOwner: string;
    timelockExpiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveryStoppedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BaseRecovery extends BaseContract {
  connect(runner?: ContractRunner | null): BaseRecovery;
  waitForDeployment(): Promise<this>;

  interface: BaseRecoveryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  disable: TypedContractMethod<[], [void], "nonpayable">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  executeRecovery: TypedContractMethod<
    [recoveringAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getEip712Hash: TypedContractMethod<
    [recoveryData: BaseRecovery.RecoveryDataStruct],
    [string],
    "view"
  >;

  init: TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;

  isInited: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isRecovering: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  recoveryDataTypeHash: TypedContractMethod<[], [string], "view">;

  recoveryNonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  recoveryStates: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, string] & { timelockExpiry: bigint; newOwner: string }],
    "view"
  >;

  stopRecovery: TypedContractMethod<[], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "disable"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeRecovery"
  ): TypedContractMethod<
    [recoveringAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getEip712Hash"
  ): TypedContractMethod<
    [recoveryData: BaseRecovery.RecoveryDataStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isInited"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRecovering"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "recoveryDataTypeHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recoveryNonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "recoveryStates"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, string] & { timelockExpiry: bigint; newOwner: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "stopRecovery"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "Disabled"
  ): TypedContractEvent<
    DisabledEvent.InputTuple,
    DisabledEvent.OutputTuple,
    DisabledEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "Inited"
  ): TypedContractEvent<
    InitedEvent.InputTuple,
    InitedEvent.OutputTuple,
    InitedEvent.OutputObject
  >;
  getEvent(
    key: "RecoveryExecuted"
  ): TypedContractEvent<
    RecoveryExecutedEvent.InputTuple,
    RecoveryExecutedEvent.OutputTuple,
    RecoveryExecutedEvent.OutputObject
  >;
  getEvent(
    key: "RecoveryStarted"
  ): TypedContractEvent<
    RecoveryStartedEvent.InputTuple,
    RecoveryStartedEvent.OutputTuple,
    RecoveryStartedEvent.OutputObject
  >;
  getEvent(
    key: "RecoveryStopped"
  ): TypedContractEvent<
    RecoveryStoppedEvent.InputTuple,
    RecoveryStoppedEvent.OutputTuple,
    RecoveryStoppedEvent.OutputObject
  >;

  filters: {
    "Disabled(address)": TypedContractEvent<
      DisabledEvent.InputTuple,
      DisabledEvent.OutputTuple,
      DisabledEvent.OutputObject
    >;
    Disabled: TypedContractEvent<
      DisabledEvent.InputTuple,
      DisabledEvent.OutputTuple,
      DisabledEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "Inited(address)": TypedContractEvent<
      InitedEvent.InputTuple,
      InitedEvent.OutputTuple,
      InitedEvent.OutputObject
    >;
    Inited: TypedContractEvent<
      InitedEvent.InputTuple,
      InitedEvent.OutputTuple,
      InitedEvent.OutputObject
    >;

    "RecoveryExecuted(address,bytes)": TypedContractEvent<
      RecoveryExecutedEvent.InputTuple,
      RecoveryExecutedEvent.OutputTuple,
      RecoveryExecutedEvent.OutputObject
    >;
    RecoveryExecuted: TypedContractEvent<
      RecoveryExecutedEvent.InputTuple,
      RecoveryExecutedEvent.OutputTuple,
      RecoveryExecutedEvent.OutputObject
    >;

    "RecoveryStarted(address,bytes,uint256)": TypedContractEvent<
      RecoveryStartedEvent.InputTuple,
      RecoveryStartedEvent.OutputTuple,
      RecoveryStartedEvent.OutputObject
    >;
    RecoveryStarted: TypedContractEvent<
      RecoveryStartedEvent.InputTuple,
      RecoveryStartedEvent.OutputTuple,
      RecoveryStartedEvent.OutputObject
    >;

    "RecoveryStopped(address)": TypedContractEvent<
      RecoveryStoppedEvent.InputTuple,
      RecoveryStoppedEvent.OutputTuple,
      RecoveryStoppedEvent.OutputObject
    >;
    RecoveryStopped: TypedContractEvent<
      RecoveryStoppedEvent.InputTuple,
      RecoveryStoppedEvent.OutputTuple,
      RecoveryStoppedEvent.OutputObject
    >;
  };
}
